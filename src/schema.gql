schema {
  query: Query,
  mutation: Mutation
}

type Query {
  getAuthor(id: ID!): Author # возвращает null если ничего не нашло
  getBook(id: ID!): Book # возвращает null если ничего не нашло

  # getAuthors() возвращает всех авторов
  # getAuthors(minNumberOfBooks: 3) возвращает авторов у которых 3 и более книг
  # getAuthors(maxNumberOfBooks: 10) возвращает авторов у которых не больше 10 книг
  # getAuthors(minNumberOfBooks: 3, maxNumberOfBooks: 6) возвращает авторов у которых 3, 4, 5 или 6 книг
  getAuthors(minNumberOfBooks: Int, maxNumberOfBooks: Int): [Author!]!

  # поиск нечувствительный к регистру
  # должен поддерживать like синтаксис
  # getBooks() возвращает все книги
  # getBooks(title: "Art of %") возвращает книги начинающиеся с 'Art of'
  getBooks(title: String): [Book!]!
}

type Mutation {
  createAuthor(author: AuthorInput!): Author!
  createBook(book: BookInput!): Book!
  addAuthor(bookId: ID!, authorId: ID!): Book!

  deleteAuthor(id: ID!): Int! # возвращает количество удаленных записей (0 или 1)

  # удаляет автора и все его книги без соавторов
  # для книг в соавторстве удаляет автора из списка авторов
  # возвращает количество удаленных и измененных записей (автор+книги без соавторов+книги в соавторстве или 0)
  deleteAuthorWithBooks(id: ID!): Int!

  deleteBook(id: ID!): Int! # возвращает количество удаленных записей (0 или 1)
}

type Author {
  id: ID!
  firstName: String!
  lastName: String!
  books: [Book!]!
}

input AuthorInput {
  firstName: String!
  lastName: String!
}

type Book {
  id: ID!
  title: String!
  authors: [Author!]!
}

input BookInput {
  title: String!
  authorIds: [ID!]!
}
